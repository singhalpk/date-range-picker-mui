{"ast":null,"code":"var _jsxFileName = \"/Users/loopin/Desktop/npm/date-range-picker-mui/src/localization/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocalizationContext = /*#__PURE__*/React.createContext(null);\nlet warnedOnce = false;\n/**\n * @ignore - do not document.\n */\n\nexport function LocalizationProvider(inProps) {\n  _s();\n\n  const props = useThemeProps({\n    props: inProps\n  });\n  const {\n    children,\n    dateAdapter: Utils,\n    dateFormats,\n    dateLibInstance,\n    locale,\n    adapterLocale\n  } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce && locale !== undefined) {\n      warnedOnce = true;\n      console.warn(\"LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`\");\n    }\n  }\n\n  const utils = React.useMemo(() => new Utils({\n    locale: adapterLocale !== null && adapterLocale !== void 0 ? adapterLocale : locale,\n    formats: dateFormats,\n    instance: dateLibInstance\n  }), [Utils, locale, adapterLocale, dateFormats, dateLibInstance]);\n  const defaultDates = React.useMemo(() => ({\n    minDate: utils.date('1900-01-01T00:00:00.000'),\n    maxDate: utils.date('2099-12-31T00:00:00.000')\n  }), [utils]);\n  const contextValue = React.useMemo(() => ({\n    utils,\n    defaultDates\n  }), [defaultDates, utils]);\n  return /*#__PURE__*/_jsxDEV(LocalizationContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n}\n\n_s(LocalizationProvider, \"k+uD+uvapq+fw8AZSVWWxc5G7es=\", false, function () {\n  return [useThemeProps];\n});\n\n_c = LocalizationProvider;\nLocalizationProvider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Locale for the date library you are using\n   */\n  adapterLocale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  children: PropTypes.node,\n\n  /**\n   * DateIO adapter class function\n   */\n  dateAdapter: PropTypes.func.isRequired,\n\n  /**\n   * Formats that are used for any child pickers\n   */\n  dateFormats: PropTypes.shape({\n    dayOfMonth: PropTypes.string,\n    fullDate: PropTypes.string,\n    fullDateTime: PropTypes.string,\n    fullDateTime12h: PropTypes.string,\n    fullDateTime24h: PropTypes.string,\n    fullDateWithWeekday: PropTypes.string,\n    fullTime: PropTypes.string,\n    fullTime12h: PropTypes.string,\n    fullTime24h: PropTypes.string,\n    hours12h: PropTypes.string,\n    hours24h: PropTypes.string,\n    keyboardDate: PropTypes.string,\n    keyboardDateTime: PropTypes.string,\n    keyboardDateTime12h: PropTypes.string,\n    keyboardDateTime24h: PropTypes.string,\n    minutes: PropTypes.string,\n    month: PropTypes.string,\n    monthAndDate: PropTypes.string,\n    monthAndYear: PropTypes.string,\n    monthShort: PropTypes.string,\n    normalDate: PropTypes.string,\n    normalDateWithWeekday: PropTypes.string,\n    seconds: PropTypes.string,\n    shortDate: PropTypes.string,\n    weekday: PropTypes.string,\n    weekdayShort: PropTypes.string,\n    year: PropTypes.string\n  }),\n\n  /**\n   * Date library instance you are using, if it has some global overrides\n   * ```jsx\n   * dateLibInstance={momentTimeZone}\n   * ```\n   */\n  dateLibInstance: PropTypes.any,\n\n  /**\n   * Locale for the date library you are using\n   * @deprecated Use `adapterLocale` instead\n   */\n  locale: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalizationProvider\");","map":{"version":3,"names":["React","PropTypes","useThemeProps","LocalizationContext","createContext","warnedOnce","LocalizationProvider","inProps","props","children","dateAdapter","Utils","dateFormats","dateLibInstance","locale","adapterLocale","process","env","NODE_ENV","undefined","console","warn","utils","useMemo","formats","instance","defaultDates","minDate","date","maxDate","contextValue","propTypes","oneOfType","object","string","node","func","isRequired","shape","dayOfMonth","fullDate","fullDateTime","fullDateTime12h","fullDateTime24h","fullDateWithWeekday","fullTime","fullTime12h","fullTime24h","hours12h","hours24h","keyboardDate","keyboardDateTime","keyboardDateTime12h","keyboardDateTime24h","minutes","month","monthAndDate","monthAndYear","monthShort","normalDate","normalDateWithWeekday","seconds","shortDate","weekday","weekdayShort","year","any"],"sources":["/Users/loopin/Desktop/npm/date-range-picker-mui/src/localization/index.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nexport const LocalizationContext = React.createContext(null);\nlet warnedOnce = false;\n\n/**\n * @ignore - do not document.\n */\nexport function LocalizationProvider(inProps) {\n  const props = useThemeProps({ props: inProps });\n\n  const { children, dateAdapter: Utils, dateFormats, dateLibInstance, locale, adapterLocale } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce && locale !== undefined) {\n      warnedOnce = true;\n      console.warn(\"LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`\");\n    }\n  }\n\n  const utils = React.useMemo(\n    () =>\n      new Utils({\n        locale: adapterLocale ?? locale,\n        formats: dateFormats,\n        instance: dateLibInstance,\n      }),\n    [Utils, locale, adapterLocale, dateFormats, dateLibInstance],\n  );\n\n  const defaultDates = React.useMemo(\n    () => ({\n      minDate: utils.date('1900-01-01T00:00:00.000'),\n      maxDate: utils.date('2099-12-31T00:00:00.000'),\n    }),\n    [utils],\n  );\n\n  const contextValue = React.useMemo(\n    () => ({\n      utils,\n      defaultDates,\n    }),\n    [defaultDates, utils],\n  );\n\n  return <LocalizationContext.Provider value={contextValue}>{children}</LocalizationContext.Provider>;\n}\n\nLocalizationProvider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Locale for the date library you are using\n   */\n  adapterLocale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  children: PropTypes.node,\n  /**\n   * DateIO adapter class function\n   */\n  dateAdapter: PropTypes.func.isRequired,\n  /**\n   * Formats that are used for any child pickers\n   */\n  dateFormats: PropTypes.shape({\n    dayOfMonth: PropTypes.string,\n    fullDate: PropTypes.string,\n    fullDateTime: PropTypes.string,\n    fullDateTime12h: PropTypes.string,\n    fullDateTime24h: PropTypes.string,\n    fullDateWithWeekday: PropTypes.string,\n    fullTime: PropTypes.string,\n    fullTime12h: PropTypes.string,\n    fullTime24h: PropTypes.string,\n    hours12h: PropTypes.string,\n    hours24h: PropTypes.string,\n    keyboardDate: PropTypes.string,\n    keyboardDateTime: PropTypes.string,\n    keyboardDateTime12h: PropTypes.string,\n    keyboardDateTime24h: PropTypes.string,\n    minutes: PropTypes.string,\n    month: PropTypes.string,\n    monthAndDate: PropTypes.string,\n    monthAndYear: PropTypes.string,\n    monthShort: PropTypes.string,\n    normalDate: PropTypes.string,\n    normalDateWithWeekday: PropTypes.string,\n    seconds: PropTypes.string,\n    shortDate: PropTypes.string,\n    weekday: PropTypes.string,\n    weekdayShort: PropTypes.string,\n    year: PropTypes.string,\n  }),\n  /**\n   * Date library instance you are using, if it has some global overrides\n   * ```jsx\n   * dateLibInstance={momentTimeZone}\n   * ```\n   */\n  dateLibInstance: PropTypes.any,\n  /**\n   * Locale for the date library you are using\n   * @deprecated Use `adapterLocale` instead\n   */\n  locale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}